// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  username       String
  name           String?
  image          String?
  email          String         @unique
  emailVerified  DateTime?
  hashedPassword String?
  sessions       Session[]
  accounts       Account[]
  FavoriteList   FavoriteList[]
}

model FavoriteList {
  id     Int     @id @default(autoincrement())
  userId String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes  Video[]

  @@index([userId])
}

model Video {
  id             Int            @id @default(autoincrement())
  source         String
  description    String         @db.Text
  translatedName String?
  name           String
  genre          String
  author         String
  likes          Int?           @default(0)
  likedBy        FavoriteList[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
